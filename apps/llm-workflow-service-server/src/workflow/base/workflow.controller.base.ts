/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WorkflowService } from "../workflow.service";
import { WorkflowCreateInput } from "./WorkflowCreateInput";
import { Workflow } from "./Workflow";
import { WorkflowFindManyArgs } from "./WorkflowFindManyArgs";
import { WorkflowWhereUniqueInput } from "./WorkflowWhereUniqueInput";
import { WorkflowUpdateInput } from "./WorkflowUpdateInput";

export class WorkflowControllerBase {
  constructor(protected readonly service: WorkflowService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Workflow })
  async createWorkflow(
    @common.Body() data: WorkflowCreateInput
  ): Promise<Workflow> {
    return await this.service.createWorkflow({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Workflow] })
  @ApiNestedQuery(WorkflowFindManyArgs)
  async workflows(@common.Req() request: Request): Promise<Workflow[]> {
    const args = plainToClass(WorkflowFindManyArgs, request.query);
    return this.service.workflows({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Workflow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async workflow(
    @common.Param() params: WorkflowWhereUniqueInput
  ): Promise<Workflow | null> {
    const result = await this.service.workflow({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Workflow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWorkflow(
    @common.Param() params: WorkflowWhereUniqueInput,
    @common.Body() data: WorkflowUpdateInput
  ): Promise<Workflow | null> {
    try {
      return await this.service.updateWorkflow({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Workflow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWorkflow(
    @common.Param() params: WorkflowWhereUniqueInput
  ): Promise<Workflow | null> {
    try {
      return await this.service.deleteWorkflow({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
