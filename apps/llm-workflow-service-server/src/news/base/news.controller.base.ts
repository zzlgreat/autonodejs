/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NewsService } from "../news.service";
import { NewsCreateInput } from "./NewsCreateInput";
import { News } from "./News";
import { NewsFindManyArgs } from "./NewsFindManyArgs";
import { NewsWhereUniqueInput } from "./NewsWhereUniqueInput";
import { NewsUpdateInput } from "./NewsUpdateInput";

export class NewsControllerBase {
  constructor(protected readonly service: NewsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: News })
  async createNews(@common.Body() data: NewsCreateInput): Promise<News> {
    return await this.service.createNews({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [News] })
  @ApiNestedQuery(NewsFindManyArgs)
  async newsItems(@common.Req() request: Request): Promise<News[]> {
    const args = plainToClass(NewsFindManyArgs, request.query);
    return this.service.newsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: News })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async news(
    @common.Param() params: NewsWhereUniqueInput
  ): Promise<News | null> {
    const result = await this.service.news({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: News })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateNews(
    @common.Param() params: NewsWhereUniqueInput,
    @common.Body() data: NewsUpdateInput
  ): Promise<News | null> {
    try {
      return await this.service.updateNews({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: News })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNews(
    @common.Param() params: NewsWhereUniqueInput
  ): Promise<News | null> {
    try {
      return await this.service.deleteNews({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
