/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserInteractionService } from "../userInteraction.service";
import { UserInteractionCreateInput } from "./UserInteractionCreateInput";
import { UserInteraction } from "./UserInteraction";
import { UserInteractionFindManyArgs } from "./UserInteractionFindManyArgs";
import { UserInteractionWhereUniqueInput } from "./UserInteractionWhereUniqueInput";
import { UserInteractionUpdateInput } from "./UserInteractionUpdateInput";

export class UserInteractionControllerBase {
  constructor(protected readonly service: UserInteractionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserInteraction })
  async createUserInteraction(
    @common.Body() data: UserInteractionCreateInput
  ): Promise<UserInteraction> {
    return await this.service.createUserInteraction({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserInteraction] })
  @ApiNestedQuery(UserInteractionFindManyArgs)
  async userInteractions(
    @common.Req() request: Request
  ): Promise<UserInteraction[]> {
    const args = plainToClass(UserInteractionFindManyArgs, request.query);
    return this.service.userInteractions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserInteraction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userInteraction(
    @common.Param() params: UserInteractionWhereUniqueInput
  ): Promise<UserInteraction | null> {
    const result = await this.service.userInteraction({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserInteraction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserInteraction(
    @common.Param() params: UserInteractionWhereUniqueInput,
    @common.Body() data: UserInteractionUpdateInput
  ): Promise<UserInteraction | null> {
    try {
      return await this.service.updateUserInteraction({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserInteraction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserInteraction(
    @common.Param() params: UserInteractionWhereUniqueInput
  ): Promise<UserInteraction | null> {
    try {
      return await this.service.deleteUserInteraction({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
